{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor_group_1_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)\nmotor_group_1_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nmotor_group_1 = MotorGroup(motor_group_1_motor_a, motor_group_1_motor_b)\nmotor_group_3_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nmotor_group_3_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nmotor_group_3 = MotorGroup(motor_group_3_motor_a, motor_group_3_motor_b)\nmotor_7 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\nmotor_5 = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\nfrom vex import * \nimport urandom \nbrain = Brain() \n# Robot configuration \ncontroller_1 = Controller(PRIMARY) \nmotor_group_1_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False) \nmotor_group_1_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False) \nmotor_group_3_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False) \nmotor_group_3_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False) \nmotor_5 = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True) \nmotor_6 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True) \nmotor_7 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False) \ndigital_out_a = DigitalOut(brain.three_wire_port.a) \nmotor_group_2 = MotorGroup(motor_group_1_motor_a, motor_group_1_motor_b, motor_group_3_motor_a, motor_group_3_motor_b, motor_5, motor_6) \nmotor_group_l = MotorGroup(motor_group_1_motor_a, motor_5) \nmotor_group_r = MotorGroup(motor_group_3_motor_a, motor_6) \nremote_control_code_enabled = True \n# Autonomous mode \ndef autonomous(): \n    motor_group_2.spin_for(FORWARD, 345, DEGREES) \n    motor_group_l.spin_for(FORWARD, 90, DEGREES) \n    motor_7.set_velocity(200, PERCENT) \n    motor_7.spin(FORWARD) \n# Driver control \ndef rc_auto_loop_function_controller_1(): \n    while True: \n        if remote_control_code_enabled: \n            drivetrain_left_side_speed = (controller_1.axis4.position() + controller_1.axis2.position())*-3 \n            drivetrain_right_side_speed = (controller_1.axis4.position() - controller_1.axis2.position())*-3\n            # Left drivetrain control \n            if -5 < drivetrain_left_side_speed < 5: \n                motor_group_l.stop() \n            else: \n                motor_group_l.set_velocity(drivetrain_left_side_speed, PERCENT) \n                motor_group_l.spin(FORWARD) \n            # Right drivetrain control \n            if -5 < drivetrain_right_side_speed < 5: \n                motor_group_r.stop() \n            else: \n                motor_group_r.set_velocity(drivetrain_right_side_speed, PERCENT) \n                motor_group_r.spin(FORWARD) \n            # Motor 7 control \n            if controller_1.buttonR1.pressing(): \n                motor_7.spin(FORWARD) \n            elif controller_1.buttonR2.pressing(): \n                    motor_7.spin(REVERSE) \n            else: motor_7.stop() \n            # DigitalOut control \n            if controller_1.buttonL2.pressing(): \n                digital_out_a.set(True) \n            else: \n                digital_out_a.set(False) \n            wait(20, MSEC) \n# Competition setup \ncompetition = Competition(rc_auto_loop_function_controller_1, autonomous)\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"motor_group_1","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[3,4],"name":"motor_group_3","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[7],"name":"motor_7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[5],"name":"motor_5","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"motor_6","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}